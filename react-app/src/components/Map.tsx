import React, { useState } from "react";
import {
  MapContainer,
  TileLayer,
  Marker,
  Popup,
  GeoJSON,
  useMapEvents,
  useMap,
  Tooltip,
} from "react-leaflet";
import "leaflet/dist/leaflet.css";
import ukrGeoJSon from "./UKR_adm1.json";
import { SheedData } from "./GoogleSheetsAPI";
import ScaleBar from "./ScaleBar";
import Sidebar from "./MapSideBar";
import L from "leaflet";

// –¢–∏–ø –ø—Ä–æ–ø—Å—ñ–≤ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Map (Props type for Map component)
type Props = {
  onRegionSelect: (props: any) => void; // –ö–æ–ª–±–µ–∫ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ä–µ–≥—ñ–æ–Ω—É (Callback when a region is selected)
};

function Map({ onRegionSelect }: Props) {
  // –°—Ç–∞–Ω –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É (State for storing selected region)
  const [selectedRegion, setSelectedRegion] = useState<any>(null);

  // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –∫–∞—Ä—Ç–∏ ‚Äî –ö–∏—ó–≤ (Initial map position ‚Äî Kyiv)
  const position: [number, number] = [50.4501, 30.5234];

  // –ú–µ–∂—ñ –∫–∞—Ä—Ç–∏ –≤–∏–∑–Ω–∞—á–∞—é—Ç—å—Å—è –∑–∞ GeoJSON –£–∫—Ä–∞—ó–Ω–∏ (Map bounds based on Ukraine GeoJSON)
  const bounds = L.geoJSON(ukrGeoJSon as any).getBounds();

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ Google Sheets (Fetching data from Google Sheets)
  const sheetData = SheedData();

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Å–∏–≤—É —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —à–∫–∞–ª–∏ (Extract numeric values for color scale)
  const values = sheetData
    .map((row) => parseInt(row.total, 10))
    .filter(Number.isFinite);

  // –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è (Find min and max value)
  const minValue = Math.min(...values);
  const maxValue = Math.max(...values);

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–∫–∞–ª–∏ –∫–æ–ª—å–æ—Ä—ñ–≤ (Color scale configuration)
  const levels = 6;
  const step = Math.floor((maxValue - minValue) / levels);
  const scale = Array.from({ length: levels + 1 }, (_, i) => minValue + i * step);

  // –û–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É –∫–æ–ª—å–æ—Ä—É –¥–ª—è –∑–Ω–∞—á–µ–Ω–Ω—è (Calculate color index for a given value)
  const getColorIndex = (value: number, min: number, max: number): number => {
    if (isNaN(value)) return 1;
    const normalized = (value - min) / (max - min);
    return Math.ceil(normalized * levels);
  };

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º (Get color by index)
  const getColorByIndex = (index: number) => {
    const colors = [
      "#FBDB93",
      "#F4B5A7",
      "#ad5e78",
      "#BE5B50",
      "#8A2D3B",
      "#641B2E",
    ];
    return colors[Math.min(index - 1, colors.length - 1)];
  };

  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ —Ä–µ–≥—ñ–æ–Ω (Handle region click)
  const handeRegionClick = (props: any) => {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–∞–Ω—ñ —Ä–µ–≥—ñ–æ–Ω—É –≤ —Ç–∞–±–ª–∏—Ü—ñ (Find region data from sheet)
    const regionData = sheetData.find((row) => row.region === props.NAME_1);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω–∏–π —Ä–µ–≥—ñ–æ–Ω —Ä–∞–∑–æ–º –∑ –π–æ–≥–æ –¥–∞–Ω–∏–º–∏ (Save selected region with its data)
    setSelectedRegion({
      ...props,
      total: regionData ? regionData.total : null,
    });

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø—Ä–æ–ø—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ —Ä–µ–≥—ñ–æ–Ω—É –≤ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    // (Trigger callback to send region data to parent component)
    onRegionSelect(props);
  };

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ —ñ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É –∫–∞—Ä—Ç–∏
  // (Configure style and events for each map feature)
  const onEachFeature = (feature: any, layer: any) => {
    const props = feature.properties;
    const regionName = props.NAME_1;
    const regionInfo = sheetData.find((row) => row.region === regionName);
    const total = regionInfo ? regionInfo.total : null;
    const value = regionInfo ? parseInt(regionInfo.total, 10) : 0;

    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∑–∞–ª–∏–≤–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (Determine fill color based on value)
    const colorIndex = getColorIndex(value, minValue, maxValue);
    const fillColor = getColorByIndex(colorIndex);

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∏–ª—å —à–∞—Ä—É (Set layer style)
    layer.setStyle({
      fillColor: regionInfo ? fillColor : "red",
      weight: 2,
    });

    // HTML –¥–ª—è —Ç—É–ª—Ç—ñ–ø–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ –Ω–∞ —Ä–µ–≥—ñ–æ–Ω (Tooltip HTML when hovering)
    const tooltipContent = `
      <div class="info-card">
        <div class="info-header">
          <span class="icon">üè†</span>
          <span class="region">${props.NAME_1}</span>
        </div>
        <hr />
        <div class="info-row">
          <span>–í–µ—Ç–µ—Ä–∞–Ω—ñ–≤:</span>
          <strong>${total}</strong>
        </div>
        <div class="info-row">
          <span>–í–∞–∫–∞–Ω—Å—ñ–π:</span>
          <strong>0</strong>
        </div>
        <div class="info-row">
          <span>–†–µ–π—Ç–∏–Ω–≥:</span>
          <span class="ratio-value">
            <span class="circle good"></span>
            Property (XX%)
          </span>
        </div>
      </div>
    `;

    // –ü–æ–¥—ñ—ó –º–∏—à—ñ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ —Ä–µ–≥—ñ–æ–Ω–∞–º–∏ (Mouse events for region interaction)
    layer.on({
      mouseover: (e: any) => e.target.setStyle({ fillOpacity: 0.5 }), // –ù–∞–≤–µ–¥–µ–Ω–Ω—è ‚Äî –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è (Hover = change opacity)
      mouseout: (e: any) => e.target.setStyle({ fillOpacity: 1 }),   // –í–∏—Ö—ñ–¥ –º–∏—à—ñ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å (Mouse out = restore)
      click: () => handeRegionClick(props),                          // –ö–ª—ñ–∫ ‚Äî –≤–∏–±—ñ—Ä —Ä–µ–≥—ñ–æ–Ω—É (Click = select region)
    });

    // –ü—Ä–∏–≤‚Äô—è–∑—É—î–º–æ —Ç—É–ª—Ç—ñ–ø –¥–æ —à–∞—Ä—É (Bind tooltip to region layer)
    layer.bindTooltip(tooltipContent, { sticky: true });
  };

  // –Ø–∫—â–æ –¥–∞–Ω—ñ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ "Loading..." (Show loading indicator)
  if (!sheetData || sheetData.length === 0) {
    return <div>Loading...</div>;
  }

  return (
    <div
      style={{
        position: "relative",
        height: "100vh",
        width: "100%",
        display: "flex",
      }}
    >
      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–∏ (Main map container) */}
      <MapContainer
        center={position}
        zoom={6.7}
        zoomSnap={0.1}
        zoomDelta={0.1}
        scrollWheelZoom={false}
        dragging={false}
        bounds={bounds}
        maxBounds={bounds}
        maxBoundsViscosity={1.0}
        zoomControl={false}
        doubleClickZoom={false}
        boxZoom={false}
        keyboard={false}
        touchZoom={false}
        style={{ height: "100%", width: "100%", background: "transparent" }}
      >
        {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —à–∞—Ä—ñ–≤ GeoJSON (Display GeoJSON layers) */}
        <GeoJSON
          data={ukrGeoJSon as any}
          style={{
            color: "black",
            weight: 2,
            fillOpacity: 1,
          }}
          onEachFeature={onEachFeature}
        />

        {/* –ú–∞—Å—à—Ç–∞–±–Ω–∞ —à–∫–∞–ª–∞ —É –Ω–∏–∂–Ω—å–æ–º—É –ª—ñ–≤–æ–º—É –∫—É—Ç—ñ (Scale bar at bottom-left corner) */}
        <div style={{ position: "absolute", bottom: "10%", left: "10%" }}>
          <ScaleBar scale={scale} />
        </div>
      </MapContainer>

      {/* –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ä–µ–≥—ñ–æ–Ω (Sidebar with region info) */}
      <Sidebar
        region={selectedRegion}
        onClose={() => setSelectedRegion(null)}
      />
    </div>
  );
}

export default Map;
// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–∏ (Export the Map component)
